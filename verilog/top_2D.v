module top_2D(
	x0,
	x1,
	x2,
	x3,
	y0,
	y1,
	y2,
	y3,
	r0,
	r1,
	r2,
	r3,
	wrong,
	x_out,
	y_out,
	clk,
	wrong_adder1,
	wrong_adder2);

	//---Ports declearation: generated by Robei---
	input [15:0] x0;
	input [15:0] x1;
	input [15:0] x2;
	input [15:0] x3;
	input [15:0] y0;
	input [15:0] y1;
	input [15:0] y2;
	input [15:0] y3;
	input [15:0] r0;
	input [15:0] r1;
	input [15:0] r2;
	input [15:0] r3;
	output wrong;
	output [15:0] x_out;
	output [15:0] y_out;
	input clk;
	output wrong_adder1;
	output wrong_adder2;

	wire [15:0] x0;
	wire [15:0] x1;
	wire [15:0] x2;
	wire [15:0] x3;
	wire [15:0] y0;
	wire [15:0] y1;
	wire [15:0] y2;
	wire [15:0] y3;
	wire [15:0] r0;
	wire [15:0] r1;
	wire [15:0] r2;
	wire [15:0] r3;
	reg wrong;
	wire [15:0] x_out;
	wire [15:0] y_out;
	wire clk;
	wire wrong_adder1;
	wire wrong_adder2;
	wire [15:0] HA_ave9_p4;
	wire [15:0] HA_ave10_p4;
	wire D_cla_mem_cnt;
	wire [15:0] D_cla_x0;
	wire [15:0] D_cla_y0;
	wire D2_calculate8_mem_cnt;
	wire [15:0] D2_calculate8_y0;
	wire [15:0] D2_calculate8_x0;
	wire [15:0] D_cla4_y0;
	wire [15:0] D_cla4_x0;
	wire [15:0] D_cla3_x0;
	wire [15:0] D_cla3_y0;
	wire D_cla3_mem_cnt;
	wire D_cla4_mem_cnt;
	wire judge4_r;
	wire judge3_r;
	wire judge2_r;
	wire judge1_r;

	//----Code starts here: integrated by Robei-----
	/*initial
		begin 
		//x_sum=0;
		//y_sum=0;
		//addr0=0;
		wrong=0;
		
		end*/
	
	
	
	
	
	
	/*reg [2:0] sum;
		always @(en1 or en2 or en3  or en0)
		begin
		//addr=0;
		sum= en0+en1+en2+en3;
		// enable data load in		            
		           if(sum<3)
					begin
					wrong=1;
				//	$display("wrong");
					end
	else begin
	wrong=0;
	end
		end
		*///删去en相关代码
		
		 
	
	//---Module instantiation---
	D2_calculate D_cla1(
		.x1(x0),
		.y1(y0),
		.x2(x1),
		.y2(y1),
		.x3(x2),
		.y3(y2),
		.r1(r0),
		.r2(r1),
		.r3(r2),
		.reset(judge1_r),
		.clk(clk),
		.x0(D_cla_x0),
		.y0(D_cla_y0),
		.mem_cnt(D_cla_mem_cnt));

	judge judge1(
		.y1(y0),
		.y2(y1),
		.y3(y2),
		.r(judge1_r),
		.x1(x0),
		.x2(x1),
		.x3(x2),
		.clk(clk));

	Kalmenfilter Km_x(
		.ResrcData(HA_ave9_p4),
		.x_out(x_out));

	judge judge2(
		.y1(y0),
		.y2(y1),
		.y3(y3),
		.r(judge2_r),
		.x1(x0),
		.x2(x1),
		.x3(x3),
		.clk(clk));

	judge judge3(
		.y1(y0),
		.y2(y2),
		.y3(y3),
		.r(judge3_r),
		.x1(x0),
		.x2(x2),
		.x3(x3),
		.clk(clk));

	judge judge4(
		.y1(y1),
		.y2(y2),
		.y3(y3),
		.r(judge4_r),
		.x1(x1),
		.x2(x2),
		.x3(x3),
		.clk(clk));

	Kalmenfilter Km_y(
		.ResrcData(HA_ave10_p4),
		.x_out(y_out));

	D2_calculate D_cla2(
		.x1(x0),
		.y1(y0),
		.x2(x1),
		.y2(y1),
		.x3(x3),
		.y3(y3),
		.r1(r0),
		.r2(r1),
		.r3(r3),
		.reset(judge2_r),
		.clk(clk),
		.x0(D2_calculate8_x0),
		.y0(D2_calculate8_y0),
		.mem_cnt(D2_calculate8_mem_cnt));

	HA_ave HA_ave_X(
		.p0(D_cla_x0),
		.p1(D2_calculate8_x0),
		.p2(D_cla3_x0),
		.p3(D_cla4_x0),
		.p4(HA_ave9_p4),
		.mem_cnt0(D_cla_mem_cnt),
		.mem_cnt1(D2_calculate8_mem_cnt),
		.mem_cnt2(D_cla3_mem_cnt),
		.mem_cnt3(D_cla4_mem_cnt),
		.wrong_adder(wrong_adder1));

	HA_ave HA_ave_Y(
		.p0(D_cla_y0),
		.p1(D2_calculate8_y0),
		.p2(D_cla3_y0),
		.p3(D_cla4_y0),
		.p4(HA_ave10_p4),
		.mem_cnt0(D_cla_mem_cnt),
		.mem_cnt1(D2_calculate8_mem_cnt),
		.mem_cnt2(D_cla3_mem_cnt),
		.mem_cnt3(D_cla4_mem_cnt),
		.wrong_adder(wrong_adder2));

	D2_calculate D_cla3(
		.x1(x0),
		.y1(y0),
		.x2(x2),
		.y2(y2),
		.x3(x3),
		.y3(y3),
		.r1(r0),
		.r2(r2),
		.r3(r3),
		.reset(judge3_r),
		.clk(clk),
		.x0(D_cla3_x0),
		.y0(D_cla3_y0),
		.mem_cnt(D_cla3_mem_cnt));

	D2_calculate D_cla4(
		.x1(x1),
		.y1(y1),
		.x2(x2),
		.y2(y2),
		.x3(x3),
		.y3(y3),
		.r1(r1),
		.r2(r2),
		.r3(r3),
		.reset(judge4_r),
		.clk(clk),
		.x0(D_cla4_x0),
		.y0(D_cla4_y0),
		.mem_cnt(D_cla4_mem_cnt));

endmodule    //top_2D

