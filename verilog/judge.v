module judge(
	y1,
	y2,
	y3,
	r,
	x1,
	x2,
	x3,
	clk);

	//---Ports declearation: generated by Robei---
	input [15:0] y1;
	input [15:0] y2;
	input [15:0] y3;
	output r;
	input [15:0] x1;
	input [15:0] x2;
	input [15:0] x3;
	input clk;

	wire [15:0] y1;
	wire [15:0] y2;
	wire [15:0] y3;
	wire r;
	wire [15:0] x1;
	wire [15:0] x2;
	wire [15:0] x3;
	wire clk;

	//----Code starts here: integrated by Robei-----
	
	reg[31:0] yc1;
	 reg [31:0]  Dist_12, Dist_13, Dist_23;
	reg  Judge_2D = 0;
	real r_x1, r_y1, r_x2, r_y2, r_x3, r_y3;
	always @(posedge clk)
	//if(en)
	begin
	         
	            Dist_12 = $hypot((r_x1 - r_x2),(r_y1 - r_y2));//1¡¢2»ùÕ¾¾àÀë
	            Dist_13 = $hypot((r_x1 - r_x3),(r_y1 - r_y3));//1¡¢3»ùÕ¾¾àÀë
	            Dist_23 = $hypot((r_x2 - r_x3),(r_y2 - r_y3));//2¡¢3»ùÕ¾¾àÀë
	            if ((Dist_12 + Dist_13) > (Dist_23) && (Dist_12 + Dist_23) > (Dist_13) && (Dist_13 + Dist_23) > (Dist_12))
	           begin
	                Judge_2D=1;
	end
	            else begin
	Judge_2D=0;
	end
	end
	assign  r =  Judge_2D;
endmodule    //judge

