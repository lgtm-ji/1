using System;

namespace TwoDimensionalLocalizationAlgorithm
{
    class Program
    {
        static void Main(string[] args)
        {
            // 随机产生输入数据
            Random rand = new Random();
            double x1 = rand.NextDouble() * 100;
            double y1 = rand.NextDouble() * 100;
            double r1 = rand.NextDouble() * 50;
            double x2 = rand.NextDouble() * 100;
            double y2 = rand.NextDouble() * 100;
            double r2 = rand.NextDouble() * 50;
            double x3 = rand.NextDouble() * 100;
            double y3 = rand.NextDouble() * 100;
            double r3 = rand.NextDouble() * 50;

            // 调用二维定位算法函数
            double[] result = Get_three_BS_Out_XY(x1, y1, r1, x2, y2, r2, x3, y3, r3);

            // 输出结果
            Console.WriteLine("Input:");
            Console.WriteLine($"x1: {x1}, y1: {y1}, r1: {r1}");
            Console.WriteLine($"x2: {x2}, y2: {y2}, r2: {r2}");
            Console.WriteLine($"x3: {x3}, y3: {y3}, r3: {r3}");
            Console.WriteLine("Output:");
            Console.WriteLine($"Point_x: {result[0]}, Point_y: {result[1]}");
        }

        static double[] Get_three_BS_Out_XY(double x1, double y1, double r1,
                                    double x2, double y2, double r2,
                                    double x3, double y3, double r3)
        {
            double[,] A = new double[2, 2];
            double[,] B = new double[2, 2];
            double[] C = new double[2];
            double[] Point_xy = new double[2];
            A[0, 0] = 2 * (x1 - x2); A[0, 1] = 2 * (y1 - y2);
            A[1, 0] = 2 * (x1 - x3); A[1, 1] = 2 * (y1 - y3);

            double det = 0;
            det = A[0, 0] * A[1, 1] - A[1, 0] * A[0, 1];

            if (det != 0)
            {
                B[0, 0] = A[1, 1] / det;
                B[0, 1] = -A[0, 1] / det;
                B[1, 0] = -A[1, 0] / det;
                B[1, 1] = A[0, 0] / det;

                C[0] = r2 * r2 - r1 * r1 - x2 * x2 + x1 * x1 - y2 * y2 + y1 * y1;
                C[1] = r3 * r3 - r1 * r1 - x3 * x3 + x1 * x1 - y3 * y3 + y1 * y1;

                Point_xy[0] = B[0, 0] * C[0] + B[0, 1] * C[1];
                Point_xy[1] = B[1, 0] * C[0] + B[1, 1] * C[1];

                return Point_xy;
            }
            else
            {
                Point_xy[0] = 0;
                Point_xy[1] = 0;

                return Point_xy;
            }
        }
    }
}
